/**
 * This code was automatically generated by codegen
 */

import java.util.*;

public class Automaton1 {

  /**
   * Init method for state chart
   */
  public void init(SymbolTable a) {
    a.post_states[ a.SYSTEM ] = true;
    // Default of or state SYSTEM
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM] = true;
    // Defaults of and state SYSTEM_SYSTEM
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV] = true;
    // Default of or state TV
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV] = true;
    // Default of or state TV_TV
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING] = true;
    // Defaults of and state WORKING
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_WORKING_SOUND] = true;
    // Default of or state WORKING_SOUND
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_WORKING_SOUND_MUTE] = true;
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY] = true;
    // Default of or state DISPLAY
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW] = true;
    // Defaults of and state SHOW
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_SM_CONTROL] = true;
    // Default of or state SM_CONTROL
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_SM_CONTROL_REST] = true;
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_CHANNELS] = true;
    // Default of or state CHANNELS
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_CHANNELS_CH1] = true;
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL] = true;
    // Default of or state REMOTE_CONTROL
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL] = true;
    // Defaults of and state REMOTE_CONTROL_REMOTE_CONTROL
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_INFO] = true;
    // Default of or state INFO
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_INFO_INFO_DUMMY] = true;
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_CHANNEL] = true;
    // Default of or state CHANNEL
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_CHANNEL_CHANNEL_DUMMY] = true;
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_MAIN] = true;
    // Default of or state MAIN
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_MAIN_MAIN_DUMMY] = true;
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_SOUND] = true;
    // Default of or state SOUND
    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_SOUND_SOUND_DUMMY] = true;
  }
  
  /**
   * This method will simulate a single step
   * of the hierarchical automaton
   */
  public void step(SymbolTable a) {
    int trans = 0;
    int selected = 0;
    int i = 0;
    Random rg = new Random();

    if ( a.pre_events[a.EVENT_$$stop$$]) {
      // Stutter in this state
      a.post_events[a.EVENT_$$stop$$] = true;
      return;
    }
    // Or State SYSTEM
    if (a.pre_states[ a.SYSTEM]) {
      a.post_states[ a.SYSTEM ] = true;
      a.post_states[a.SYSTEM] = true;
      // And State SYSTEM_SYSTEM
      a.post_states[ a.SYSTEM_SYSTEM_SYSTEM ] = true;
      // Or State TV
      if (a.pre_states[ a.SYSTEM_SYSTEM_SYSTEM_TV]) {
        a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV ] = true;
        a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV] = true;
        // Or State TV_TV
        if (a.pre_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV]) {
          a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV ] = true;
          boolean[] enabled_0 = {
            a.pre_events[a.EVENT_TV_ON],
            a.pre_events[a.EVENT_TV_OFF],
          };
          trans = 0;
          for (i = 0; i < enabled_0.length; ++i)
            if (enabled_0[i])
              ++trans;
          if (trans == 0) {
            selected = -1; // Force default
          } else {
            for (selected = Math.abs(rg.nextInt()) % enabled_0.length; !enabled_0[selected]; selected = (selected + 1) % enabled_0.length)
              ;
          }
          switch (selected) {
          case 0:
            // Empty action
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING] = true;
            // Defaults of and state WORKING
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_WORKING_SOUND] = true;
            // Default of or state WORKING_SOUND
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_WORKING_SOUND_MUTE] = true;
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY] = true;
            // Default of or state DISPLAY
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW] = true;
            // Defaults of and state SHOW
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_SM_CONTROL] = true;
            // Default of or state SM_CONTROL
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_SM_CONTROL_REST] = true;
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_CHANNELS] = true;
            // Default of or state CHANNELS
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_CHANNELS_CH1] = true;
            break;
          case 1:
            // Empty action
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_STANDBY] = true;
            break;
          default:
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV] = true;
            // Basic State STANDBY
            a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_STANDBY ] = true;
            // And State WORKING
            a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING ] = true;
            // Or State WORKING_SOUND
            if (a.pre_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_WORKING_SOUND]) {
              a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_WORKING_SOUND ] = true;
              boolean[] enabled_1 = {
                a.pre_events[a.EVENT_SOUND],
                a.pre_events[a.EVENT_MUTE],
              };
              trans = 0;
              for (i = 0; i < enabled_1.length; ++i)
                if (enabled_1[i])
                  ++trans;
              if (trans == 0) {
                selected = -1; // Force default
              } else {
                for (selected = Math.abs(rg.nextInt()) % enabled_1.length; !enabled_1[selected]; selected = (selected + 1) % enabled_1.length)
                  ;
              }
              switch (selected) {
              case 0:
                // Empty action
                a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_WORKING_SOUND_SOUND_ON] = true;
                break;
              case 1:
                // Empty action
                a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_WORKING_SOUND_MUTE] = true;
                break;
              default:
                a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_WORKING_SOUND] = true;
                // Basic State MUTE
                a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_WORKING_SOUND_MUTE ] = true;
                // Basic State SOUND_ON
                a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_WORKING_SOUND_SOUND_ON ] = true;
                break;
              }
            }
            // Or State DISPLAY
            if (a.pre_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY]) {
              a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY ] = true;
              boolean[] enabled_1 = {
                a.pre_events[a.EVENT_TXT],
                a.pre_events[a.EVENT_TXT],
              };
              trans = 0;
              for (i = 0; i < enabled_1.length; ++i)
                if (enabled_1[i])
                  ++trans;
              if (trans == 0) {
                selected = -1; // Force default
              } else {
                for (selected = Math.abs(rg.nextInt()) % enabled_1.length; !enabled_1[selected]; selected = (selected + 1) % enabled_1.length)
                  ;
              }
              switch (selected) {
              case 0:
                // Empty action
                a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_VIDEOTEXT] = true;
                break;
              case 1:
                // Empty action
                a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW] = true;
                // Defaults of and state SHOW
                a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_SM_CONTROL] = true;
                // Default of or state SM_CONTROL
                a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_SM_CONTROL_REST] = true;
                a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_CHANNELS] = true;
                // Default of or state CHANNELS
                a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_CHANNELS_CH1] = true;
                break;
              default:
                a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY] = true;
                // And State SHOW
                a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW ] = true;
                // Or State SM_CONTROL
                if (a.pre_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_SM_CONTROL]) {
                  a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_SM_CONTROL ] = true;
                  boolean[] enabled_2 = {
                    a.pre_events[a.EVENT_MUTE],
                    true,
                  };
                  trans = 0;
                  for (i = 0; i < enabled_2.length; ++i)
                    if (enabled_2[i])
                      ++trans;
                  if (trans == 0) {
                    selected = -1; // Force default
                  } else {
                    for (selected = Math.abs(rg.nextInt()) % enabled_2.length; !enabled_2[selected]; selected = (selected + 1) % enabled_2.length)
                      ;
                  }
                  switch (selected) {
                  case 0:
                    // Empty action
                    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_SM_CONTROL_REST] = true;
                    break;
                  case 1:
                    a.post_events[a.EVENT_SOUND] = true;
                    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_SM_CONTROL_SM_CONTROL_SOUND] = true;
                    break;
                  default:
                    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_SM_CONTROL] = true;
                    // Basic State SM_CONTROL_SOUND
                    a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_SM_CONTROL_SM_CONTROL_SOUND ] = true;
                    // Basic State REST
                    a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_SM_CONTROL_REST ] = true;
                    break;
                  }
                }
                // Or State CHANNELS
                if (a.pre_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_CHANNELS]) {
                  a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_CHANNELS ] = true;
                  boolean[] enabled_2 = {
                    a.pre_events[a.EVENT_ONE],
                    a.pre_events[a.EVENT_TWO],
                    a.pre_events[a.EVENT_TWO],
                    a.pre_events[a.EVENT_ONE],
                  };
                  trans = 0;
                  for (i = 0; i < enabled_2.length; ++i)
                    if (enabled_2[i])
                      ++trans;
                  if (trans == 0) {
                    selected = -1; // Force default
                  } else {
                    for (selected = Math.abs(rg.nextInt()) % enabled_2.length; !enabled_2[selected]; selected = (selected + 1) % enabled_2.length)
                      ;
                  }
                  switch (selected) {
                  case 0:
                    a.post_events[a.EVENT_MUTE] = true;
                    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_CHANNELS_CH1] = true;
                    break;
                  case 1:
                    a.post_events[a.EVENT_MUTE] = true;
                    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_CHANNELS_CH2] = true;
                    break;
                  case 2:
                    a.post_events[a.EVENT_MUTE] = true;
                    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_CHANNELS_CH2] = true;
                    break;
                  case 3:
                    a.post_events[a.EVENT_MUTE] = true;
                    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_CHANNELS_CH1] = true;
                    break;
                  default:
                    a.post_states[a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_CHANNELS] = true;
                    // Basic State CH2
                    a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_CHANNELS_CH2 ] = true;
                    // Basic State CH1
                    a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_SHOW_CHANNELS_CH1 ] = true;
                    break;
                  }
                }
                // Basic State VIDEOTEXT
                a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_TV_TV_TV_WORKING_DISPLAY_VIDEOTEXT ] = true;
                break;
              }
            }
            break;
          }
        }
      }
      // Or State REMOTE_CONTROL
      if (a.pre_states[ a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL]) {
        a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL ] = true;
        a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL] = true;
        // And State REMOTE_CONTROL_REMOTE_CONTROL
        a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL ] = true;
        // Or State INFO
        if (a.pre_states[ a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_INFO]) {
          a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_INFO ] = true;
          boolean[] enabled_0 = {
            true,
            true,
          };
          trans = 0;
          for (i = 0; i < enabled_0.length; ++i)
            if (enabled_0[i])
              ++trans;
          if (trans == 0) {
            selected = -1; // Force default
          } else {
            for (selected = Math.abs(rg.nextInt()) % enabled_0.length; !enabled_0[selected]; selected = (selected + 1) % enabled_0.length)
              ;
          }
          switch (selected) {
          case 0:
            // Empty action
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_INFO_INFO_DUMMY] = true;
            break;
          case 1:
            a.post_events[a.EVENT_TXT] = true;
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_INFO_INFO_DUMMY] = true;
            break;
          default:
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_INFO] = true;
            // Basic State INFO_DUMMY
            a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_INFO_INFO_DUMMY ] = true;
            break;
          }
        }
        // Or State CHANNEL
        if (a.pre_states[ a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_CHANNEL]) {
          a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_CHANNEL ] = true;
          boolean[] enabled_0 = {
            true,
            true,
            true,
          };
          trans = 0;
          for (i = 0; i < enabled_0.length; ++i)
            if (enabled_0[i])
              ++trans;
          if (trans == 0) {
            selected = -1; // Force default
          } else {
            for (selected = Math.abs(rg.nextInt()) % enabled_0.length; !enabled_0[selected]; selected = (selected + 1) % enabled_0.length)
              ;
          }
          switch (selected) {
          case 0:
            // Empty action
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_CHANNEL_CHANNEL_DUMMY] = true;
            break;
          case 1:
            a.post_events[a.EVENT_TWO] = true;
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_CHANNEL_CHANNEL_DUMMY] = true;
            break;
          case 2:
            a.post_events[a.EVENT_ONE] = true;
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_CHANNEL_CHANNEL_DUMMY] = true;
            break;
          default:
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_CHANNEL] = true;
            // Basic State CHANNEL_DUMMY
            a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_CHANNEL_CHANNEL_DUMMY ] = true;
            break;
          }
        }
        // Or State MAIN
        if (a.pre_states[ a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_MAIN]) {
          a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_MAIN ] = true;
          boolean[] enabled_0 = {
            true,
            true,
            true,
          };
          trans = 0;
          for (i = 0; i < enabled_0.length; ++i)
            if (enabled_0[i])
              ++trans;
          if (trans == 0) {
            selected = -1; // Force default
          } else {
            for (selected = Math.abs(rg.nextInt()) % enabled_0.length; !enabled_0[selected]; selected = (selected + 1) % enabled_0.length)
              ;
          }
          switch (selected) {
          case 0:
            // Empty action
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_MAIN_MAIN_DUMMY] = true;
            break;
          case 1:
            a.post_events[a.EVENT_TV_OFF] = true;
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_MAIN_MAIN_DUMMY] = true;
            break;
          case 2:
            a.post_events[a.EVENT_TV_ON] = true;
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_MAIN_MAIN_DUMMY] = true;
            break;
          default:
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_MAIN] = true;
            // Basic State MAIN_DUMMY
            a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_MAIN_MAIN_DUMMY ] = true;
            break;
          }
        }
        // Or State SOUND
        if (a.pre_states[ a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_SOUND]) {
          a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_SOUND ] = true;
          boolean[] enabled_0 = {
            true,
            true,
            true,
          };
          trans = 0;
          for (i = 0; i < enabled_0.length; ++i)
            if (enabled_0[i])
              ++trans;
          if (trans == 0) {
            selected = -1; // Force default
          } else {
            for (selected = Math.abs(rg.nextInt()) % enabled_0.length; !enabled_0[selected]; selected = (selected + 1) % enabled_0.length)
              ;
          }
          switch (selected) {
          case 0:
            // Empty action
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_SOUND_SOUND_DUMMY] = true;
            break;
          case 1:
            a.post_events[a.EVENT_MUTE] = true;
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_SOUND_SOUND_DUMMY] = true;
            break;
          case 2:
            a.post_events[a.EVENT_SOUND] = true;
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_SOUND_SOUND_DUMMY] = true;
            break;
          default:
            a.post_states[a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_SOUND] = true;
            // Basic State SOUND_DUMMY
            a.post_states[ a.SYSTEM_SYSTEM_SYSTEM_REMOTE_CONTROL_REMOTE_CONTROL_REMOTE_CONTROL_SOUND_SOUND_DUMMY ] = true;
            break;
          }
        }
      }
    }
  }
}
