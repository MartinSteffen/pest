package simu;

/**
 * UserInterface
 * Stellt dem Benutzer eine Steuerzentrale fuer den Simulator zur Verfuegung
 */
public class UserInterface extends Simu implements java.awt.event.ActionListener, java.awt.event.ItemListener {
	private java.awt.Button ivjButton1 = null;
	private java.awt.Button ivjButton2 = null;
	private java.awt.Button ivjButton3 = null;
	private java.awt.Button ivjButton4 = null;
	private java.awt.Checkbox ivjCheckbox1 = null;
	private java.awt.Checkbox ivjCheckbox2 = null;
	private java.awt.Panel ivjContentsPane = null;
	private java.awt.Frame ivjFrame1 = null;
	private java.awt.Panel ivjPanel1 = null;
	private java.awt.TextField ivjTextField1 = null;
	private int synchron = 1;
	private java.awt.CheckboxGroup ivjCheckboxGroup1 = null;
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public UserInterface(){
	initialize();
}
/**
 * Constructor
 * @param daten Symbol
 * @param eEdit Symbol
 * @param igui Symbol
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public UserInterface(absyn.Statechart daten, editor.Editor eEdit, gui.GUIInterface igui) {
	super(daten, eEdit, igui);
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent.
 *
 * ACHTUNG ! Aufgrund von Sichtbarkeitsproblemen ist diese Methode "public". Trotzdem bitte
 * nicht benutzen und nicht aufrufen.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if ((e.getSource() == getButton1()) ) {
		connEtoC1();
	}
	if ((e.getSource() == getButton2()) ) {
		connEtoC2();
	}
	if ((e.getSource() == getButton4()) ) {
		connEtoC5();
	}
	// user code begin {2}
	// user code end
}
/**
 * Comment
 */

private void button1_ActionEvents() {
	makeStep();
	return;
}
/**
 * ActionEvent fuer Button 2
 */
private void button2_ActionEvents()
{
	int n = 1;
	boolean success = false;
	n = Integer.parseInt(((getTextField1()).getText()));
	success = makeNStep(n);
	if (success = false) {
		guiOutput("Simulator: FEHLER: FATAL - Simulatorfehler bei Mehrschrittausfuehrung");
		guiOutput("Simulator: CODE 001: Allgemeiner Fehler");
	} 
	return;
}
/**
 * Aendert den Status von Checkbox1, wenn der Status von Checkbox2 geaendert wird.
 */
private void checkbox1_ItemStateChanged(java.awt.event.ItemEvent itemEvent) {
	ivjCheckbox2.setState(!(ivjCheckbox2.getState()));
	return;
}
/**
 * Aendert den Status von Checkbox1 wenn der Status von Checkbox2 geaendert wird
 */
private void checkbox2_ItemStateChanged(java.awt.event.ItemEvent itemEvent) {
	ivjCheckbox1.setState(!(ivjCheckbox1.getState()));
	return;
}
/**
 * connEtoC1:  (Button1.action. --> UserInterface.button1_ActionEvents()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1() {
	try {
		// user code begin {1}
		// user code end
		this.button1_ActionEvents();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (Button2.action. --> UserInterface.button2_ActionEvents(Lsimu.Simu;)V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2() {
	try {
		// user code begin {1}
		this.button2_ActionEvents();
		// user code end
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (Checkbox1.item.itemStateChanged(java.awt.event.ItemEvent) --> UserInterface.checkbox1_ItemStateChanged(Ljava.awt.event.ItemEvent;)V)
 * @param arg1 java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ItemEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.checkbox1_ItemStateChanged(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (Checkbox2.item.itemStateChanged(java.awt.event.ItemEvent) --> UserInterface.checkbox2_ItemStateChanged(Ljava.awt.event.ItemEvent;)V)
 * @param arg1 java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ItemEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.checkbox2_ItemStateChanged(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (Button4.action. --> UserInterface.finalize()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5() {
	try {
		// user code begin {1}
		// user code end
		this.finalize();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GC31FA2A6GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E134BB8BF4D457F1BAB63531CD9B79C4A490D39737B4C7A7D69A6A50931250146392873B32CDEC5C60C6F51594E3EC93D76E2135CF0C6307347AA1A12455A289D8C07F8FDAD6DFBE96921610C0828496C8AC820451EA77A1ADDEE9573BCFC2446438B3775EF97B76E9D7A00E2BF30637F7665E193973664E1DBB77A11976AECC5E1CE812244D491278BB34D91266F5CB1279557F3491AE2D5016A8E97E0AG
	F224574A8D70ACG5A4A4FED095912712BB4E8DB30FD4316188F3FF3256C1C48D370A30C1C91201D13DB722717736DF412134A5A9B93B3611985D08B38BE008505A8BFB329C060A7211DA5FEA3EC862E35C558671972828DBEDE74B3G2DGE0996BD311246FB38978B9G0BG5219E6DB0D0785FDD55DDC297F8FBBD336229C4DB882C3B117D1A91E1214100CC6C81262FBD1CEF34F6743C77D2E517126268BFE59F7F2CC11FD576D8EF9DEB16A3221BC0D751524C1E81716A04ED901730F0376C6004C92526997
	454DC2661C79CF0041F60555E924046BB227A420D37F2A1B1B394CB3C9A4B33604E446A421CCC329AD518C50D8CA782713915F8DEDA7406DD252E5DDB96932547304B430A73CAED125DC07252581DDDAFFF6F3738E762ECBB250C69B01D6D0E6CB34G74GF881A281F6B19FFBADFD9FBC5B0614F64F6828E72C4D6BBD66F67A4EF81C329BFEB7B581C5604E4B8E0F4FA9C95C0F5EAD37045007A03AAC580790785CAECA746EBBA29F1322147A146490F3B3E59527AC93BCD6158566E6AAC73B4531F718GF89C07
	36617837993E3FBC006F2BC07C8D064776ED202DAFA7BB4F7A12F4697BB292BC2ABAA5B514AE5F2FCD19D741F5D8DC9150055B7843CC34F19C605FC7D9153644CA00AE0011CA32F1651606BB5918F96E185D5DBBBE64357B14E363AE37D37689DB1FCF8AE76BD915D36D1C255A633C8167BD2F125BA3D545FF46700BB5F8EE2727181FE2FBA550ACD536C45E7FE08A62A32BF87F8C15CF8743AF5660B91F154C2F313D8AE80D7BEC095CD60EAC3455BCE8AF810885D88BE02836A596D6132D7CDBEA6E529FFBB4F6
	62E3AD99F97014A7951F7D6418DF310FB9E41B5D67328F39E53FA47A9C4840798D850DEBE26B4481B2BA65B159E7D7DC1EB160EE9F15612578F91F760C9C6C631399354FB5AA0300D12FC4FCCFE7644253ED77AB973CCE3BA287FAF0FAEF867A5C045D869C01817C76D6232D52AAB0DE34426F01EA3253435B9037845A312ADDDE48B04273B4B8096CEEEA6AF0B9D08D3B6F962D475FD6609C62213F45E2CB0CGB06D37A5C6832C5FCF7E7ECEBF79FB0479BB523239A5A17DFD49CFCDA986AB77AB33B5606FE25D
	B3B99D00F7824C82D8843082E02D157698EF4520BE9E008E281B6A1F7B391E281B5EF7D177F0F1C58BDC56A3D3E4215FA5E95AB877E4317EC371389BD95CFE518D5A58B53831AC247DE2FA0BD38CB542FEB57AF8D11303EB2399707DG13B574FE53B38B395F9F337BE57274CFFD602432B37036F95F142D5B504FA764B125C3764AE3CE786197FE36F5EBFAE08DDC77287E194B7098DB5A41C97DAAFE47569C0E879E5A95C574A2C637AB0A4FB5B42E483D322238460683632B18AE7E203065973E6DE2FBE1A44C
	B13A06FC231F451E15B57C5D4729F8A743EF02F6E12D367F52247EB06F04F8E8F1F1B5F767BB41BE744B30B212046F5C0B4F844BE8CEB189DFA11E29422FB87D942337425CC7GA28116824457129DDEC86E8FB3FEA63ACC2F639BCC061EFF4657A4037B0BBBAB3C6F7A33C27B6E2D2C503E7BD556743E79E0D6A85F64343F4842F86A700C0D49ECF129E40967176F74214E2EB117F251659C1615DE579FE548036B502F7732181D863F4DF594DBEF16D0EC28BC7EAD2976F75BC366B519DD8DA9CA9D775159F501
	5840F57A46B6DC8332DB9E852334FB4647940E1F4B76830177A7B1DCC4F18BBC8BAB0F0DAB0AE72C4EE2E73330966E5FFF34B0A895368C719E575AD80F63E8F9FFE5152D2AD63C6BDC297FE81706D77D9DF95587736A46845C5A8B7F9C8136F51C67790A87994F769159717910E7324E62D264D1AB7E532B407E58BEE29F9B161D15B76C93F62B7D26E2E5AEE1BD89F44636AA04F487713AF6D24F26BB9C9FD429DE4CF35F45E01D6A3FC61D6AE728D303506967C9F59A5BB7CEE37B6BAE488F418B715DB52A6F6E
	577568C3B423CE1FE75C8B8C79DEB3E2C4FF0A86BFDB86303A0E761A1CEC24D3AEA1B619F60F5B4D1782503A6B59D92E5224715D8DF57C3CF898E81C9E9D129E2552152AD074E8157EBFA1694BD47A443ED074D5AA7D3DA07A5AFACEB7B5D09EF5BD9767DF896DD6001E861A7F296CDC4D7C3BBD1E4F473DFD18A5D20E18130DF1C37EE2DC069492892765DBA28FEC4EB16AE8B63BFBBC10DFF664E03CF4EBF872F832580EF82F4FB58A5BB8EE34424691C95AB9B8C1C7BAFF73773B30B3851EA7B0992D23587413
	E339ACB671A3C30F06A7BF27FF5B20BD03C7G4F05GABG56B4106D3E152C151BA07A30385408742FD24C02D6G6DDA001EC65E4759286DF722107A2D067686CD3F4C835AFE3FD77BB5833E8FC0B9407BAD8E6A770FC554EFA360B38F867AD98EEA7BFDD1CC7D3C001FFDB0A0B7DA74DBFE101DDDAA68BCDE23624EB05C4BE0589F99A837BB132D2DC9C88F56040C5F8806C31CFF41A1FDEEB75F04FC8F833E6B90795ABF65E8FD2D4D6F77B8DC6C88A17CE54C280D6DE29FB4EE0167F5174F8F67C227BC296E03
	C654954F9882AD7C6149EA5C8B74E72663CE176271D1AA59FE13051EBECFBB9CF33A40BD5B552D4F6612EF42F8DE3F782C126CB5F00876365FDE5656C61444DDA999E1EC93A5EC32C4E39B434F28B6729F0CB76A3C91689C77E49549339CA61CE59F611CAA6E7BAAEE8160783C5F4CAB3E633CCFBAB020F19E56EA6401F94D6A4374FE5C392177DCDFAE564DBED7577DC4AE2E43893156055D2FE2FE2129C1619EA8E8BF4EB5910D360126A6360CF91D6CA9C328DADA66473CCE46752DADA1FDCBBF261A5133E528
	6FG349500B99F13AD5ABB4CD36585ED8B7CEC1E121AA95E41A2989B77B14503AB295AF8E0EA02B88FB0G4063506EC254C36CCEE20E11C5D8FC8C13DF08F5153A251562107418343C6EC04A36903E93F93FB9455B44EDB02FA960BB7324494DB1GDCF7CFA1693E967A180F2831ECCBA85D7B0E10ED5EABAED6751CAEF7217AC5C9914999819E8BD5B92EAC2D1CB5C7381CCDC748C68F97E10C19E1CEA1ECF91F7F90BC6FB14391FA2FD3754EEE069854CCFAF79BC3699D51CC7679E1106C99E6B2C276F70AC9F6
	94700DD5E5FFE9563F9BC30BAD3132C575DBDB860BF5EAEEC3F542FAEDBCDEFFE3CF58F85C5C427D2527C59F0F7F14076B478D780896DA6F8939F8E620F8FC9EA2A0CC91F6E90A310F1B12783A976D3FB6A5533A17681C64281C2E76B9A5A636D0BE7213FC34C5B434D7G4481EC84B09DA55D2A365F31CEF8FCF21ABA615A3B522B71A837D357D1BADBAE2E1A49FC8654F1F57BE6B24E2B0EFBEAC663E629639A2A7563669D8D1C77E3B43F170B5FBCE6BE4FEA8B2B81378140708971BBD02267E77EA440237613
	60DAC247A7D48FEDA9E7F566CFF85D937D0563BB99FEC40367EB63C5963331BD8934B8D5FEE62ADEFEEBEB304C81DD1B0F5BB9E51CD5570E500D63EB6D25266D5214BD029FBCA43A6399CF556ECB73008F56E41642B33615762551BD340F2FEDA55F4E5E017B0F398DE28BC08F009BA092A086E0D59B79786476D039CA300F07CBD48235A9EE077142FB335F7DD346696D175096BC0E4F7B79ADB46F34E3748E2B0A6ECD07C3D3466D5173B9966A9D3EDB13BF759D52BEAF74DC1805FAE29C6DD7755CF00FFA7E7E
	0EFAC69E8BE52B7B0D143BC42BBAACAC3EB79D7EEE4AB87D7B0A576940FDF9EE1E5E17F15FFB9F7AE63613AFBFE526F7DA5ACE3E5C3393F18350F637135F3E329D6B4734EF74F86074A5511EF1DF9E66069E1FEB58B526561E984E61017EBE2A757F11653F37D1364A77697C707530E773C35743DE4C8FDD8FFBA5FF7ADA6E3F67072B17F17DBEE07A4500EEABGB86EC495699C2762FE216292D4DC57BE4299BA88772C0AABD0F127D88EEE01F6370A3B3E9FF1DEE84FD6F1DB9B19AE50DE5EC1F1370D5DAB45F5
	70780A6F0C633B99BEC10367F177E58365A4066336441163443B1B655531500ED7F135252403F402F0674A90D78A6D43A748075B593DFD075ABE435A68D73C7DCAD938DA72CC81E568F1DC46BBDF1B0C2490385D8C7FEC5EB666CBFE3F6CE78139432E58856D8DE53B9422F6FA968EB79255AD5AD353C51F630A273DCE227875EAE508F3D10F9DD615B8672552FA9CB8C1E71E8F5370BDC6C1BB86E005EAFB5F1E697208B80D7D9244EF3E8EF66E883F660AF604DEF395BBF07D7BBD63BE072CDFD7569D85AAAD30
	DBE1120CA661FD8E31710A5DB7ACCFD917C759F8CE8BB73EF3C738354B6D9DD32835F73D6AABAFED194EC6064E000D8ABA35F52741A2AD3F86155F5FE691BFCB67D47FEC55607A6077C8A71D0DCA0A357C9AD5FE330D446FF688FE119A5C22A07DFE95446F00246E51F964BFCBBB49FF1E5945628334533AEC0905DD64BFBFB2CFE71B43DD81595DDDDA7F393093634C245A3E445A37D49F175B325477F9FC4CA9B68BDEFBFA144558DF819CD77B67DD44390C3AF8CFFC27BC2E192BD06F412EC0BE49F9DCE571F7
	F722A4D52B3857982E88BABD28622E31787B868428C7D4DCBC439D0131BFCCA2791EC12CE98E7B6C5E9117435FA17B9DBE17D7710003261D44B176EA74CFAF6891853082E01346B61C475F5FE467B81FFD945C3257ABBB2435EC6C1F76539E5C83EDA740AC00C5GABCE529970878D78F45B07E4377AFECB9BF10C3E2E4D5FDBE7B24E016E7F44B7928CC777079C772AE1A6F707B385AE633F434A88F5F7F8AF71B9D70ACFCDE17639659987BFF21FE2F9FA0976DCEDB945675287CFEE774ED2327B92402D84D88F
	10F69A4E5E27E9CD0E1421FE0ACBE1675F2E53787D581FE129C4487D66C574BF08C88A86C88C52627CB6657CB167F440168BCFCF35AB7767C3DB105F12535C1F372978CE060F5360797E1D141EA95A06EEB843F7533E7C509E5A2BB729386F6DC5DC6199DBE26399423D39057A352A38AD19544F29621631FC598B6DB9AA4E13CDE3972838489C9A3BDC453D4BF031500ED7F1FFE5A4FE9BD55C6BC662E7B8CB389493712BBCCBBE7BD21E5E360DE783766CBA9B4E36CDE6D697BC2BBF13F6B03C7B2C7ECC9A3B0B
	4E243701962F6A740219746C7814F07F351B749C791474AC2E423CC77914FC69B60B91EA1DA8F8619EF47630FB096AD209FF170810AEG773559404784FD70F7E38F71EC5F0F5F26D9875C2E218107E7F440B5B4BAB0BEB1BAG828606E47B188BB6688187C8992EBBE89DF6DDA73FF56C17A42A6B6FF2D26D3AF9CE149475CBF358EF6922FB38EDE3FB82F5A4F7473F0A5A755F309C9547994E59921B4FA16EE203F68D22EC4CF32CA80B519F8A22635CCAB6EB69BF8D2227CF997F3BA0BA2ED5072073393D1527
	4E6D4305126551705FD14EBA476794AD1EEBCF44A48F1C1A5C4C636FBAAB6EE37A3A00876F853BF950617B68B7CA50E76201477B285FF93A9FF8E8DC55634863520681F3487B01186F5527D41E97352773819B772977832325E463D96749460F156AED7C1BA09BBEDF2A37714BC1B67C28D4EF638386AD3D2ECCEF639F8459B87F32368E597A4FC5A91B4358F8191853CA4D5C44B9A8154E9B1B4E531AFAAA0D5619391756D44B962C21F4C1FBG408BB08BE081409200D8355F99562FD65C374577727BB43CAB13
	7AF8FD1577CBCF476F5310179ABFB43F1774CE0DA531BA1CD734E705682B0785228F17DD49E4EB77BF6DD9A35437D85BF4ED7A4E66EE3EF121EFD4785E37F08F6DFD05E00FC600BEG85A02A0FE2CBD126B66760FB5F7FE2F892BC248CF57F04B1AB81568324DD00D88D407B9FA817A40AB9AFE7611C9C5A3087ED6785769DE6B6464A2E8B34B7BF10CD3C2381378CA08EE0930059C63C67D784F82799D1D7BFD6646159EDE35F209869BE2C995ADC4ECAA34A0934111CCDC61293833865G71G52C54811AE121C
	B515A8C76C17F964272D9749CF1F4FA7BF9D3CC8FE55EAC6B9335476A95646BBD831076D3A5B73A972381BFEFA3F48115E3EEB99214E38F782EE3F574DE43FF920E78CC0AC4086004CFE32DFBEEED1A237EEE3B9F8AAE0674213FF437F8F559170FC70A67B1BFDABAAA7E97E7CEF665F2A1B7F68018B3D2937F6F8DD396C39B95DE4CCCA9DCF9FF4A5B5B4242A74BEE35285FC564E0F647DAFDCE27D2BAEDCAA057E3752AFDCE27D855D5FE004E6C36A97927B4B97F2A7D77523FEEFD5D32C33C09B7760257D5C7E
	FCFF3E5F225D1F1324409EED3A846F7FD260DD715838F72BB6B6E66E5D1902F75D21E2E304983BD8BC3B4E4608BB1AC616B72C857CC600344B601BG0DGBD1729C676DCF195BC5B3C574F4B7C10FD46BEE69FE6B736CDCD00BEB98AAD6D31C5780835E1A6778C01F96DAC227DECE4E43EB4E7776E30775D6E4B627F82082739A0A6991FFCEECFDBF0EE4B003686E09300698A448F0056AB6A37B86C8E822B5ECE175226A8F647887B92000A61F8B99FC063410A67F5C925389777DD61F99D8247E7B27C20864F73
	3D39EC6F46369BE82B2ED02DF32795FD22F1G6C8DB082908130F000743BDCD2AB5D21DE5F6771F64B9332DBD3F294751952195A1F6BF4982FD145597A0912B2F85A6CB7C25E6E1F02F46553219B32C369338FCBF4B6FAAF68AEFB59GFFB78970B4DFE57BF1DA61B4BA24DD555699EE1BF0AE62ABBB01B3B685F074EDD95141G0E3E6DBAD8067E24FE8127721C2851626BD57C139D785DC71FBC291CF049EEE79D619FA843739FAB12555137D977E5063A73F6DE25FB57DBA6ADFD72AA27AF38CAF56FE776D02E
	3578AA65DA9B7768F32DAB12B6D7AA5FBBA51F8D22776F5567DA7303688F6F5567DA95024EF5AA4FA01D562BBA75E568F53A984473018C3DCE8F855117E6CC2F53DB9961F492E7646CACE9EA9D0247091776E8635F2A241A14A4A9F41CA87C0C7BD42DF8469F0EC966F30E4926B98FFEC6F37E37EC7D1CEB02F44E4C197EDCF1B4C7BF6761A03AB7E77AB99FE4F904629B1779BC978DEB673966592230F77173447CE244F3A4B7A61973FC4D984A0E5C864539E403352A8DFAF2273741FD39FA9B6C8D1A6312DC3D
	8D36865157656AED7022207398E24C8F95C34C57A837DA1BCF39C1A3603AGC6GE683C4DF239CB3AFB590939A45DCB3F653DCD7DE2339FE3CFB7A39FE3EDBBF572AA07ADF6E564F7575A07A0B3B75F37DC24C1567A886CB0494780B08887E3D1C7DC952F73F7B5CF38989127451C79FFC004F057037E89176413FC03F0F581FB463BF3ECF1D3050BEA58DC24C9A24B326FC1BFC505475671261719DE177E46FA0FFD7116299F5A8A6194F7389CBABBC3F5A04BA5E9BFC7587D883AC17FA46C2B6DDB6486B18EB04
	BC3E073DDD0B39D482608CF6DBE28100852083E0G408D90813040CE7B6C25FD180873CD36D3D4E21B1A5A07BB648917C3466F7D44C585CBF6781816EADC27E36A9DC1DB3576DB950EBBD10DFB0ACFA4CEA71D046F2EC65FF43A5D6C5606634ED5639946B56617477CAE45B5413A8BDAFFF5F6B00DFD764A675AD00F36D88AF3D98D70BEC0669064F1C3B437755562BB3D90794DF167B05E19607F56D2C8563FD8425F4F3CE439737F717A358567BC6401F5B70A7C897F9B8B4ED971F899126356D9503FFC2E6191
	05F795788D96766D10FC1D2145F91A1D8F79EF236677E3A5DF57FDDCA860B2167C3F4A60F3AE360637FB15B5743DD80DB574DD74816B747FB723459A6A7FE670FA54F0B166FC2C9E65700CDADDC323567109D12BFDC8314A107EB5B51D9DF73BC5E50A3E7149E1F7044D60F3FDG6EA10A416B52B0F7EA1771E3E95A379FA9257CFE630179526AB7EBD3F2424412D9C3625CB294286930FD0E45729FE72A5F418C51DD46C75B557F179C282529A99D9F3758C45FC67C9FADD7979AC795057B50022808E2440A8FD6
	8C02D43002C29F0A78A288D6680375C1C48A029529D0C55402451BF6D336F587C3321BDDCDAAC3ED58C837E4F76BE6A3FDE89BD08926E54D46DACA84A7B3F7F726194EAEB3834D7A64B977E7B2BB5DCD49C282071DB9F76E5C3FF34F79661CF3B32E4BEF66B7560DE5F6170BF35F7406319F3B003AE3D117FBF477946E510EB89B18180BD30525F46A325D9707FAEBF79B0B6B1B506E56206D23D36756E93B62B61A5475DB1C4B540E68C3F6E423FD603212CB232C74C37BFB005E52A5A6BE1511367910AEED73CC
	A6EA1BB1D7FA4D3666472236791FB61C31BC96354DBF36799F7B4622367924F8BF9F6350695E64E2BE57DB3D1B9B2E47577519920E632C81B69B68861089344510EBFCA92F12CE760DE532D323225920A1A8375387F2E8EB641F4493A2FF793C44875B615D7B0277FF1147393BE3993EC9240E79AA0FFB5F24285CA5EF20004F01B58DBDF72200D84253B547369CDA518C41CF94302D6516CF3D8AF567210C73078B38F78C4D57787DE881672E4907A06A0E95F08C20AD9DCFA464D82B5496FAB6D226372EEA5E8A
	AF3BD86C2E03E70B7736FDFF9459F98230D90B2D2668EF25487213EAB50F867370D7F1A8604DF915869A750643FD885B18AE0D5328EF61A146CF5228EFA19D17EB22C259D6AAFD8B8727F14DBF047BD86D7A31C9204BC00BC0B65096206DB539FE870B08FF3A69G9E0CE0B84155AC4767327ACAE2BDD9FD2936662FFA3D9676CD3F1C8C57FBD7149D963F317A5DBEC95E47A7AE60BCFAC28FF25E7DACCE9D58B92E1EC459A3BF631E40B30496E6B733E39FDC0B72795C4174D0269E1D6767987FECBDBA4F45341C
	67BC147555256D78B63351BD4B7B37334476076698F65067DD25E1A1738B34893091440F9FD791653BB1FCC2BC6BBFA1DBFBCA5173CEA22F2D04FDEDF88B3F4F7E6A401829A7F2DE4F7726173E6F315E83389D44F5DF687AF4FC73B15B74263641677953696E7A6248743D754531F2E72C9CAF5F0D1515F2E72CBCD28EE3E54E4B08773AC1E298677FD046EF8C1E4B405D38682F6531067D8999EB7832AE638F1FABB276BCEECA5EDE061FA661FEA6609DE53CF938DF8AF84BA979BE5314FB6559741A8C3C903A1E
	C9EF3EBC7C3929EDF03F44210474CBBC88E35E8174AA5081A0E2491845CE7C14963E1E7713381FEB8D4767F125A3BCA7811E4DD992C3A7D34C9F8402446BFF748B895AEB25E4FBCB70FC9368E120DDC07BAC092B0695092B8EDB92D7DDD656776B39CA94D7E55B4A7B15A82EFA3C2D7CEDA50A2B8684AE93F12FCBEBF370C992312FC36F28C17E42EFB0A113E78C505B0D7A191C1A4F2905191FA46EFFAAA547B3F9CB0E674DD4F4BC25367EFC1D0A0E6749367242E8F4BC0F36156B2351719C9F88634434521BFE
	6CCFED349E47E87FCEFC863F4FFFCC86FD127E5B326D9500F654D12D5BAA1E2632B5305EBE09DF55D66043815096B90917577875F0356568265BF0282B4ED2348E4BBE993962F5601E2A6A268D56838D9199DCG03647BG62BC17A8ED0B755A53258F763EF75DBBCEE2F364BB1467AAF519592586262E0A7F3BB2C7E2E83B6648206737ECBACFE268BE019E31A3CED33666542738093E385A940B0C86117864841706D57E8DF95FC458A73A38B05E55A71A30B91ED06D6879247D6C9C6A9270D7ED0903A632183C
	52AD5ED13D2D59362F59ABD79C83E39F3308CD09542D6FE4717D1EFCC6948A5FC7967BFDABD4677F81GD0CB8788B8E86721D89BGG40CCGGD0CB818294G94G88G88GC31FA2A6B8E86721D89BGG40CCGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG129BGGGG
**end of data**/
}
/**
 * Return the Button1 property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getButton1() {
	if (ivjButton1 == null) {
		try {
			ivjButton1 = new java.awt.Button();
			ivjButton1.setName("Button1");
			ivjButton1.setBounds(19, 17, 76, 45);
			ivjButton1.setLabel("MakeStep");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	return ivjButton1;
}
/**
 * Return the Button2 property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getButton2() {
	if (ivjButton2 == null) {
		try {
			ivjButton2 = new java.awt.Button();
			ivjButton2.setName("Button2");
			ivjButton2.setBounds(19, 68, 76, 43);
			ivjButton2.setLabel("MakeNStep");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	return ivjButton2;
}
/**
 * Return the Button3 property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getButton3() {
	if (ivjButton3 == null) {
		try {
			ivjButton3 = new java.awt.Button();
			ivjButton3.setName("Button3");
			ivjButton3.setBounds(128, 19, 75, 43);
			ivjButton3.setLabel("Reset");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	return ivjButton3;
}
/**
 * Return the Button4 property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getButton4() {
	if (ivjButton4 == null) {
		try {
			ivjButton4 = new java.awt.Button();
			ivjButton4.setName("Button4");
			ivjButton4.setBounds(184, 20, 114, 23);
			ivjButton4.setLabel("Schliessen");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	return ivjButton4;
}
/**
 * Return the Checkbox1 property value.
 * @return java.awt.Checkbox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Checkbox getCheckbox1() {
	if (ivjCheckbox1 == null) {
		try {
			ivjCheckbox1 = new java.awt.Checkbox();
			ivjCheckbox1.setName("Checkbox1");
			ivjCheckbox1.setCheckboxGroup(getCheckboxGroup1());
			ivjCheckbox1.setBounds(19, 145, 179, 23);
			ivjCheckbox1.setLabel("Synchroner Betrieb");
			ivjCheckbox1.setState(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	return ivjCheckbox1;
}
/**
 * Return the Checkbox2 property value.
 * @return java.awt.Checkbox
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Checkbox getCheckbox2() {
	if (ivjCheckbox2 == null) {
		try {
			ivjCheckbox2 = new java.awt.Checkbox();
			ivjCheckbox2.setName("Checkbox2");
			ivjCheckbox2.setCheckboxGroup(getCheckboxGroup1());
			ivjCheckbox2.setBounds(231, 143, 134, 23);
			ivjCheckbox2.setLabel("Asynchroner Betrieb");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	return ivjCheckbox2;
}
/**
 * Return the CheckboxGroup1 property value.
 * @return java.awt.CheckboxGroup
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.CheckboxGroup getCheckboxGroup1() {
	if (ivjCheckboxGroup1 == null) {
		try {
			ivjCheckboxGroup1 = new java.awt.CheckboxGroup();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	return ivjCheckboxGroup1;
}
/**
 * Return the ContentsPane property value.
 * @return java.awt.Panel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Panel getContentsPane() {
	if (ivjContentsPane == null) {
		try {
			ivjContentsPane = new java.awt.Panel();
			ivjContentsPane.setName("ContentsPane");
			ivjContentsPane.setLayout(null);
			getContentsPane().add(getButton1(), getButton1().getName());
			getContentsPane().add(getButton2(), getButton2().getName());
			getContentsPane().add(getButton3(), getButton3().getName());
			getContentsPane().add(getCheckbox1(), getCheckbox1().getName());
			getContentsPane().add(getCheckbox2(), getCheckbox2().getName());
			getContentsPane().add(getTextField1(), getTextField1().getName());
			getContentsPane().add(getPanel1(), getPanel1().getName());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	return ivjContentsPane;
}
/**
 * Return the Frame1 property value.
 * @return java.awt.Frame
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Frame getFrame1() {
	if (ivjFrame1 == null) {
		try {
			ivjFrame1 = new java.awt.Frame();
			ivjFrame1.setName("Frame1");
			ivjFrame1.setLayout(new java.awt.BorderLayout());
			ivjFrame1.setBounds(87, 105, 538, 240);
			ivjFrame1.setTitle("Willkommen im Simulator");
			getFrame1().add(getContentsPane(), "Center");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	return ivjFrame1;
}
/**
 * Return the Panel1 property value.
 * @return java.awt.Panel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Panel getPanel1() {
	if (ivjPanel1 == null) {
		try {
			ivjPanel1 = new java.awt.Panel();
			ivjPanel1.setName("Panel1");
			ivjPanel1.setLayout(null);
			ivjPanel1.setBounds(4, 174, 529, 59);
			getPanel1().add(getButton4(), getButton4().getName());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	return ivjPanel1;
}
/**
 * Return the TextField1 property value.
 * @return java.awt.TextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.TextField getTextField1() {
	if (ivjTextField1 == null) {
		try {
			ivjTextField1 = new java.awt.TextField();
			ivjTextField1.setName("TextField1");
			ivjTextField1.setFont(new java.awt.Font("dialog", 0, 18));
			ivjTextField1.setText("1");
			ivjTextField1.setBounds(129, 77, 73, 26);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	return ivjTextField1;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() {
	// user code begin {1}
	// user code end
	getButton1().addActionListener(this);
	getButton2().addActionListener(this);
	getCheckbox1().addItemListener(this);
	getCheckbox2().addItemListener(this);
	getButton4().addActionListener(this);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void initialize() {
	// user code begin {1}
	// user code end
	initConnections();
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the ItemListener interface.
 * @param e java.awt.event.ItemEvent
 *
 * ACHTUNG ! Aufgrund von Sichtbarkeitsproblemen ist diese Methode "public". Trotzdem bitte
 * nicht benutzen und nicht aufrufen.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void itemStateChanged(java.awt.event.ItemEvent e) {
	// user code begin {1}
	// user code end
	if ((e.getSource() == getCheckbox1()) ) {
		connEtoC3(e);
	}
	if ((e.getSource() == getCheckbox2()) ) {
		connEtoC4(e);
	}
	// user code begin {2}
	// user code end
}
}