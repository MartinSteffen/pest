Sprachdefinition von TESC - Textuelle Statecharts
$Id: Description,v 1.3 1999-02-11 09:12:35 swtech20 Exp $
----------------------------------------------------------------------------------

Schematische Darstellung
------------------------

   -------   +---------+   -------   +--------+   ------------    
  | Datei |--| Scanner |--| Token |--| Parser |--| Syntaxbaum |
   -------   +---------+   -------   +--------+   ------------


Sprachbeschreibung
------------------

Wie man aus den Beispielen erkennt, ist die Struktur von TESC streng hierarchisch
und eng an die abstrakte Syntax angelehnt.
Es gibt genau einen Root-Zustand, der alle weiteren And-, Or- und Basic-Zustaende 
enthaelt.
Transitionen und Konnektoren werden separat nach den Zustaenden angegeben. inter-
level-Transitionen sind nicht erlaubt.
Der eindeutige Startzustand in Or-Zustaenden wird nach den Transitionen festgelegt. 
Transitionen besitzen wie in der abstrakten Syntax einen Waechter und eine 
optionale Aktion.
Der Waechter ist syntaktisch als ein boolscher Ausdruck zu sehen, der mit den 
boolschen Operatoren und, oder, folgt aus und ist aequivalent zusammen gesetzt ist. 
Als Operanden koennen Ereignisse, boolsche Variablen, "Pfadzustaende" und die 
Konstanten true, false verwendet werden.
Eine Aktion ist eine Liste von Ereignissen und boolschen Zuweisungen. 
Kommentare werden mit Semikolon begonnen und reichen bis zu Zeilenende.


Struktur von TESC an Beispielen
-------------------------------

Beispiel 1

  event (a,b)
  
  and A
      xor A1
          basic D
          from D to D on a do b
      end A1
      xor A2
          basic D
      end A2
  end A

Beispiel 2 (aus dem Pflichtenheft) ohne inter-level-Transitionen

  event (A,B,C,D,G)

  or SUD 
      basic P1
      basic P2
      or P3
         basic Q1
         and Q2
             or R1
                basic S1
                basic S2
                from S1 to S2 on C
                from S2 to S1 on G[in(SUD.P3.Q2.T2)]
                default S1
             end R1
             or R2
                basic T1
                basic T2
                from T1 to T2 on D
                from T2 to T1 on G
                default T1
             end R2
         end Q2
         from Q1 to Q2 on A do C
         default Q1
      end P3
      from P1 to P2 on C
      from P1 to P3 on A
      from P3 to P1 on B
      default P1
  end SUD

Beispiel 3

  or Main
    basic P1
    basic P2
    con C1
    from P1 to C1 on A
    from C1 to P1 on A 
  end Main

Beispiel 4

  or root
    ref a   in "ex1.tesc" as tesc
    ref b_1 in "ex2.pest" as pest
    ref b_2 in "ex3.pest" as pest_nocoord

    default a
  end root


Schlüsselwortliste
------------------

Diese Worte duerfen in einem Statechart nirgends als Bezeichner, Name oder Operator
auftauchen. Definiert sind die Schluesselworte in util.Keyword.java.


Transitionsbeschriftungen
-------------------------

Der Aufbau der Beschriftungen ist an die Syntax von Statemate angelehnt, i.e.

  EventExpr[BvarExpr] / Action

In EventExpr duerfen nur Events verwendet werden und in BvarExpr analog nur
Bvars. 


Deklarationen
-------------

Es gibt zwei Moeglichkeiten Events und Bvars einzufuehren.

1. Explizite Deklaration
Nach Den Schluesselworten Var Bzw. Event Folgt Eine Liste Von Bezeichnern,
Zu Denen Dann Entsprechend Im Weiteren Parse-Verlauf Bezuggenommen Wird.
    
2. Implizite Deklaration
Der Typ eines Bezeichners wird aus dem Kontext heraus ermittelt.
    

Externe Referenzen
------------------

Drei Typen von externen Referenzen werden untersuetzt

1. TEST-Statecharts
2. PEST-Statecharts mit Koordinaten
3. PEST-Statecharts ohne Koordinaten

Syntax

  ref IDENTIFIER in STRING as {TESC,PEST,PEST_NOCOORD}


----------------------------------------------------------------------------------

$Log: not supported by cvs2svn $
