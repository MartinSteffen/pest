PEST1_STUBS_PREPARED PEST2_STUBS_PREPARED

Das ist die erste Baseline.  Die Aufgabe war die Stubs zur Verfuegung zu
stellen. Die Abstrakte Syntax ist weitgehend vorhanden (Klassen und
Konstruktore). Es gibt noch kein lauffaehiges Programm. Die Abstrakte
Syntax ist noch nicht stabil: Konstruktoren muessen verwollstaendigt
werden. Eine Musterloesung zur Konstruktion eines Syntaxbaums gibt es noch
nicht. Keine Durchgaengige Benutzung von javadoc-Konventionen (Absyn hat
damit angefangen).

PEST1_ABSYN_BETA PEST2_ABSYN_BETA

STATUS
------

Die Arbeiten an der abstrakten Syntax sind weitgehen abgeschlossen. Die
letzten Aenderungen waren: Label, ActionEvent und Path wurden
umbenannt/geaendert.

Die Musterloesung befindet sich in Absyn/Example.java.

Der pretty-printer in Util. Man kann die Musterloesung mit dem
pretty-printer ausgeben, z.B. mit "java Util.PrettyEx".

TODO 
----- 

Da die abstrakte Syntax geaendert wurde, kann der alte Code nicht mehr
uebersetzt werden.

An der abstrakten Syntax sind folgende Punkte  noch in der Bearbeitung:
1. Die Erweiterung der abstrakten Syntax um cloneable.
2. Pfichtenheft wird den neuen Klassen angepasst.

Folgende Gruppen haben noch keine Stubs zur Verfuegung gestellt:
PEST1/Simu und STM.

Folgende Fehlermeldung wird in PEST1/TESC2 erzeugt:

Generating documentation for class TESC2.GraphOptimizer
Method void start() 
        declares that it throws class TESC2.AlgorithmException,
        but there is no corresponding @exception item
Method void start(int) 
        declares that it throws class TESC2.AlgorithmException,
        but there is no corresponding @exception item

Die Angleichung der Schnittstellen ist noch nicht abgeschlossen.

PEST1_COMPILABLE PEST2_COMPILABLE 

Ziel diese Baseline war es, kompilierfaehige PESTs zu haben, wo alle
Teilfunktionalitaeten von der GUI aus aktiviert werden koennen. DAS
ZIEL WURDE NICHT ERREICHT!


STATUS von PEST1
-----------------
Deswegen ist diese Baseline lediglich fuer PEST1 kompilierfaehig, aber
nicht alle Teilfunktionalitaeten sind in GUI eingebunden. Damit
koennen wir leben, d.h.

(1) Alle Gruppen koennen ihr Teil weiterentwickeln.
(2) Nur die in GUI eingebundenen Teilfunktionalitaeten koennen von der
GUI aus aufgerufen werden und Informationen untereinander Austauschen
(Statecharts uebergeben usw.).

Die Kompilierfaehigkeit von PEST1 wurde z.T. erst dadurch erreicht,
dass wir Makefiles aendern mussten. Sorry, aber es musste sein. Das
Problem war, dass nicht alle Makefiles dem Konvention entsprachen,
dass man die *.class Files (und nur das) durch ein Aufruf von 'make'
in dem jeweiligen Directory konstruieren kann. (Damit wurde die
Zustaendigkeit ueber die Makefiles nicht an uns uebertagen.)

Auch mussten wir in PEST1/Simu eine kleine Aenderung vornehmen.

STATUS von PEST2
----------------

In PEST2 koennen alle Teilgruppen ausser GUI uebersetzt werden. Das
liegt daran, dass die Schnittstellen noch nicht einheitlich
sind. Damit kann in PEST2 die GUI nicht gestartet werden.

Auch hier mussten wir Makefiles aendern.

Letzte Aenderungen an der abstrakten Syntax.
-------------------------------------------

Bernd hat die abstrakte Syntax um Serialization erweitert. Damit steht
jetzt dem Laden/Speichern von Statecharts unserseits nichts mehr im
Wege. Martin Steffen hat Point und Rectangle durch entsprechende
cloneable austauschen muessen. Jetzt sollte die gesamte Absyn
cloneable sein.

Nach unsere Kenntniss muss nur noch Location mit "Leben gefuellt werden",
was die TESC1-Leute machen muessten. Sonst durfte in die abstrakte Syntax
nichts mehr dazukommen.


PEST1_6 PEST2_6
================

KOMPILIERBARKEIT 

ist zur Zeit nicht gegeben! Es scheitert in PEST2/gui. Das liegt daran, daß PEST2/editor mit einer
Interfaceänderung im Rückzug ist. Wer PEST2 trotzdem starten möchte, kann das mit einer lokalen Änderung
in gui/GUIMenu.java machen. Der Fehler 

javac GUIMenu.java 
/home/swtech00/PEST2/gui/GUIwerkML.java:29: Wrong number of arguments in constructor.
        myWindow.PEditor = new editor.Editor(myWindow.SyntaxBaum,myWindow.SBDateiname,100,100,200,200,myWindow);
                           ^
1 error

kann vermieden werden, wenn man den "alten" Konstruktor editor.Editor benutzt, dem noch das letzte
Argument fehlt. Sobald PEST2/editor die Anpassung der Schnittstelle durchführt, wir es hier bekanntgegeben. 

STATUS 

Während der Besprechung haben die Gruppen den Status der Pakete folgendermassen beschrieben: 

GUI             beta
CODEGEN         -
STM             alpha

PEST1/EDITOR    -
PEST1/CHECK     beta
PEST1/TESC1     alpha
PEST1/TESC2     alpha

PEST2/EDITOR    -
PEST2/CHECK     alpha
PEST2/TESC1     beta
PEST2/TESC2     -

Legende 

-: wesentliche Teile der Funktionalität fehlen. Die Aufrufe sind wie Stubs: nehmen Argumente entgegen und
liefern Ergebnisse vom korrekten Typ, jedoch sind fest Aussagen über die Funktionalität nicht möglich. 

alpha: wesentliche Teile der Funktionalität sind implementiert. Das Paket befindet sich in der Testphase. 

beta: alle Teile der Funktionalität sind implementiert und ausführlich getestet (unit-test). Andere Teilnehmer
werden eingeladen, das Paket zu benutzen und die Gruppe über Fehler zu informieren. 

Leider haben nicht alle Gruppen den Status auch bei Ihren Klassen dokumentiert! 

KONZEPTIONELLE KONSISTENZ 

Leider ist es immer noch nicht möglich, das Zusammenspiel der Module auf konzeptionelle Konsistenz hin zu
überprüfen. Folgende Gruppen haben es noch nicht geschafft, die Anforderungen und Garantien
aufzuschreiben: 

CODEGEN
GUI
STM

PEST1/EDITOR
PEST1/TESC1     muß der Sache auf den Grund gehen und dafür sorgen,
                daß Probleme erkannt werden (statt mit unbekannt
                gekennzeichnet).
PEST1/TESC2

PEST2/EDITOR

VORBEREITUNG DER NÄCHSTEN BASELINE 

Jetzt heißt es aufzusteigen: alle, die im Moment des Status '-' haben,
sollten zum Montag 'alpha' erreichen, alle alpha-Gruppen sollten 'beta'
erreichen und die beta-Gruppen sollten die Integrationstests vorantrieben.

Mal sollte unbedingt darauf achten, daß man bei Änderungen in den Paketen
auch die dazugehörigen Kommentare ggf. anpaßt. Das betrifft insbesondere
die Kommentare zu Anforderungen, Garantien und den Statusbericht.

Ich werde versuchen, die Integrationstests zu formulieren, die dann
hoffentlich am Montag zur Verfügung stehen.

Wenn ich die Informationen zu Anforderungen und Garantien bekomme, kann ich
die Pakete auf konzeptionelle Konsistenz hin überprüfen. Wenn ich die
fehlenden Infos nicht bekomme, werde ich mich nur ärgern.
