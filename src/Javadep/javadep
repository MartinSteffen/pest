#! /bin/sh

# javadep findet und listet alle Abhängigkeiten von Paketen auf.
#
# Für ein Paket sind die Abhängigkeiten dieses Pakets die
# Abhängigkeiten der einzelnen Klassen.
#
# Für eine Klasse sind die potentiellen Abhängigkeiten alle
# öffentlichen Klassen von importierten Paketen.

# 1. Für eine angegebenes Paket:
# -- Alle Klassen-Dateien nach import-Anweisungen durchsuchen
# 2. Für alle importierten Pakete;
# -- Alle public-Klassen im des Pakets finden
# -- Nach Vorkommen dieser Klassen und Methoden in allen Dateien der
#    Klasse suchen.
###########################################################################
display_usage()
{
echo "
Usage: javadep [options] packagename|java-file
Where options are:
 -h         Display this help.
 -t         Produce text-output rather than html-code
 -i         Ignore import statements (-> search in all files)
 -n         Show an additional  list of unused functions
 -o file    Output to file
 -v         Verbose output
 -q         Show no warnings
"
}
###########################################################################
error()
{
  echo  "ERROR: $*" >/dev/stderr
}
###########################################################################
warning()
{
  if [ $quiet = 0 ]; then
    echo "WARNING: $*" >/dev/stderr
  fi
}
###########################################################################
log()
{
  if [ $verbose = 1 ]; then
    echo "$*" >/dev/stderr
  fi
}
###########################################################################
templog()
{
  echo "$*" >> $tempfile
}
###########################################################################
listrefs()
{
  read ref
  while [ $? = 0 ]; do
    echo "<li> $ref </li>"
    read ref
  done
}
###########################################################################
split_at_char()
{
# erhält als erstes Argument das neue Trennzeichen
# Die weiteren Argumente werden bei diesem Zeichen getrennt und als
# Liste einzelner Argumente zurückgegeben

  if [ $# -lt 2 ]; then
    error "split_at_char called incorrectly."
    return 1
  fi

  (
    IFS=$1
    shift
    echo $*
  )
}
###########################################################################
add_prefix()
{
  if [ "$#" != 1 ]; then
    error "add_prefix called incorrectly."
    return 1
  fi
  prefix="$1"
  read line
  while [ $? = 0 ]; do
    echo "$prefix$line"
    read line
  done
}
###########################################################################
add_postfix()
{
  if [ "$#" != 1 ]; then
    error "add_prefix called incorrectly."
    return 1
  fi
  postfix="$1"
  read line
  while [ $? = 0 ]; do
    echo "$line$postfix"
    read line
  done
}
###########################################################################
get_function_name()
{
 (
   set -f
   IFS="." 
   set $1 
   while [ $# -gt 1 ]; do
     shift 
   done 
   echo $1
 )
}
###########################################################################
find_path_dirs()
{
  if [ $# != 1 ]; then
    error "find_path_dirs called incorrectly."
    return 1
  fi
  path=`(split_at_char ":" $1)`
  
  
  for i in $path; do
    if [ -d $i ]; then
      echo $i
    fi
  done
  echo $result
}
  
###########################################################################
find_package_dir()
{
  if [ $# != 1 ]; then
    error "find_package_dir called incorrectly."
    return 1
  fi
  package=$1
  package_dir=`echo $package|sed 's/\./\//g'`
  result=
  if [ ! -z $CLASSPATH ]; then
    class_dirs=`(find_path_dirs $CLASSPATH)`
    for i in $class_dirs; do
      if [ -d $i/$package_dir ]; then
        if [ "$result" != "" ] && [ $result != $i/$package ]; then
          warning "Multiple occurences of $package in CLASSPATH"
        else
          result="$i/$package_dir"
        fi
      fi
    done
    if [ "$result" = "" ]; then
      return 1
    else
      echo "$result"
    fi
  else
    error "CLASSPATH not set"
    return 1
  fi
}
###########################################################################
find_package_files()
{
# finds all files to a package
# default is to search in one directory only
# If second argument is 1 then all subdirectories are searched too.

  if [ $# -gt 2 ]; then
    error "find_package_files called incorrectly."
    return 1
  fi
  package=`basename $1 ".*"`
  package_dir=`(find_package_dir $package)`
  if [ "$package_dir" = "" ]; then
    error "package directory not found: $1"
    return 1
  else
    if [ $# -gt 1 ] && [ "$2" = "1" ]; then
      files=`find $package_dir -type f -name "*.java" -exec grep -l "package $package" {} \;`
    else
      files=`find $package_dir -maxdepth 1 -type f -name "*.java" -exec grep -lw "package $package" {} \;`
    fi
    echo $files
  fi
}
###########################################################################
find_function_names()
{
 (
  # liest zeilenweise aus stdin und sucht in jeder Zeile 
  # (Java-Deklaration, die mit public... beginnt) nach dem
  #  Funktionsnamen
  read line
  while [ $? = 0 ]; do
    org_line=$line
    IFS="(" 
    set $line
    line=$1
    IFS=" "
    set $line
    if [ $# -gt 1 ]; then
      while [ $# != 1 ]; do
        shift
      done
      echo "$1"
    else
      error "Could not determine function name in: org_line"
    fi
    read line
  done
 )
}
###########################################################################
find_public_functions()
{
# sucht alle public-Methoden eines Paketes, die dem Pattern in $1
# entsprechen und gibt sie Zeilenweise in der Form
# filename:Methoden-Name aus.

  if [ $# != 1 ]; then
    error "find_public_functions called incorrectly."
    error "$*"
    return 1
  fi
    
  import=$1
  set -f
  set `split_at_char . $import`
  set +f
  package=$1
  shift
  while [ $# -gt 1 ]; do
    package="$package.$1"
    shift
  done
  # ist der letzte Teil des imports ein Stern, wird das gesamte package durchsucht,
  # ansonsten nur die angegebene Methode ausgegeben
  if [ "$1" != "*" ]; then
    log "Only single function imported. Existence not checked yet: $package"
    echo "$package.$1"
    return
  fi

  package_files=`(find_package_files $package 1)`
  if [ "$package_files" = "" ]; then
    error "No files found for $package"
    return 1
  fi
  # jetzt muß in allen Datein nach public-Methoden gesucht werden.
  # Jeder methode muß dann der Package-Name sowie ein : vorangestellt werden.
  for package_file in $package_files; do
    set -f
    set `grep '^\W*package.*;\W*$' $package_file|sed 's/;//g'`
    package=$2
    if [ "$package" = "" ]; then
      error "Illegal package statement in $package_file"
      continue
    fi
    functions=`grep -hw 'public.*(' $package_file|grep -v "="|find_function_names|add_prefix "$package_file:$package."`
    if [ "$functions" != "" ]; then
      echo "$functions"
    fi
  done
}
###########################################################################
find_deps_in_file()
{
  # Sucht in einer Datei zunächst nach imports, wählt anhand der imports
  # eine Liste von zu suchenden Funktionen aus und ermittelt schliesslich
  # die Vorkommen dieser Funktionen in der Datei
  # Der Dateiname wird als erster (und einziger Parameter) übergeben,
  # die gesamte Funktionsliste muss in all_pub_functions gespeichert sein
  filename=$1

  if [ $ignore_imports = 1 ]; then
    search_functions="$all_pub_functions"
  else
    my_imports=`grep -w "import .*;" $filename|grep -v "^//"|sed 's/\/\/.*//g'`
    my_imports=`echo $my_imports|sed 's/import//g'|sed 's/;//g'|sed 's/\013//g'`
  
    search_functions=
    for my_import in $my_imports; do
      case $my_import in
        java*|com*) continue
                    ;;
      esac
  
      loc_search_fcts=`(for i in $all_pub_functions; do echo $i; done)|grep "$my_import"`
      if [ "$loc_search_fcts" != "" ]; then
        search_functions="$search_functions $loc_search_fcts"
      fi
    done
  fi
  search_functions=`(for i in $search_functions; do echo $i; done)|sort -u|awk -F: '{print $2}'`
  filedeps=
  for search_function in $search_functions; do
     function_name=`get_function_name $search_function`
     case $function_name in
       clone) continue
              ;;
     esac
     deplines=`grep -n "$function_name\W*(" $filename|grep -v "^\W*\/\/"|grep -v "^\W*\*"|grep -v "public"|awk -F: '{print $1}'`
     if [ "$deplines" != "" ]; then
       for lineno in $deplines; do
         echo $search_function:$filename:$lineno
       done
     fi
  done
}

###########################################################################
find_deps()
{
  if [ $# != 1 ]; then
    error "find_deps called incorrectly"
    return 1
  fi

  # erstmal alle Dateien des Packages finden (in allen subdirs)
  package=$1
  package_files=`find_package_files $package 1`
  if [ "$package_files" = "" ]; then 
    warning "No files found for package $package"
    return 1
  fi
  package_deps=
  for package_file in $package_files; do
    package_deps="$package_deps `find_deps_in_file $package_file`"
  done
  if [ "$package_deps" != "" ]; then
    echo "$package_deps"
  fi
}
###########################################################################
templog()
{
  echo "$*" >> $tempfile
}
###########################################################################
html_print_start()
{
  echo "<html>" >$tempfile
  echo "<title> Dependencies for $*</title>" >>$tempfile
  echo "<body>" >>$tempfile

  echo "<h1 align=center>Dependencies for $* </h1>" >>$tempfile
}
###########################################################################
html_print_deps()
{
(
 my_func=$1
 shift
 my_alldeps=$*
 IFS=":"
 set $my_func
 myfunc_name=$1
 IFS="."
 set $myfunc_name
 while [ $# -gt 1 ]; do shift; done
 myfunc_name=$1
 IFS=" "
 if [ $ref_installed = 1 ]; then
   echo "<h2> Declaration(s) for $myfunc_name </h2>" >>$tempfile
   (grep "href=\"$org_package\..*$myfunc_name(" $ref_file|sed 's/<dt>//g'|add_prefix "<li>")|add_postfix "</li>" >> $tempfile
 else
   warning "Docu not installed. No links to declarations created."
 fi 
 
  echo "<h2> Occurences of $myfunc_name </h2>" >>$tempfile
  echo "<ul>" >>$tempfile
  for my_dep in $my_alldeps; do
    (
      IFS=":"
      set $my_dep
      my_fileref=$2
      my_linenum=$3
      echo "<li>" >>$tempfile
      echo "In file <a href=\"$my_fileref\">`basename $my_fileref`</a> at line $my_linenum." >>$tempfile
      echo "</li>" >>$tempfile
    )
  done
  echo "</ul>" >>$tempfile
)
}
###########################################################################
html_print_unused_functions()
{
 echo "<h2> Functions never used in external packages</h2>" >>$tempfile
 echo "<ul>" >>$tempfile
 for myfunction in $*; do
   echo "<li> $myfunction </li>" >>$tempfile
 done
 echo "</ul>" >>$tempfile
}
###########################################################################
html_print_end()
{
  echo "</body>" >>$tempfile
  echo "</html>" >>$tempfile
}
###########################################################################
tempfile=/tmp/javadep.$$
quiet=0
verbose=0
ignore_imports=0
show_unused_functions=0
html=1
outfile=pestdocu/Dependencies.html
args=
org_package=
ext_packages=
all_packages="check codegen editor gui simu stm tesc1 tesc2 util"

while [ $# != 0 ]; do
  case $1 in
	-h) display_usage
	    exit 0
	    ;;

	-t) html=0
	    shift
	    ;;

	-v) verbose=1
	    shift
	    ;;

	-q) quiet=1
	    shift
	    ;;

	-i) ignore_imports=1
	    shift
	    ;;

	-n) show_unused_functions=1
	    shift
	    ;;

	-o) if [ "$2" != "" ]; then
              outfile=$2
            else
              echo "No outputfile after -o."
              exit 1
            fi
	    shift
            shift
	    ;;

	-*) echo "Unknown option: $1"
	    display_usage;
	    exit 1
	    ;;

	 *) if [ "$org_package" = "" ]; then
              org_package=$1
            else
              ext_packages="$ext_packages $1"
            fi
            shift
	    ;;
  esac
done

if [ -f $tempfile ]; then
  rm -f $tempfile
fi
# org_package must be specified
if [ "$org_package" = "" ]; then
  error "No package specified."
  display_usage
  exit 1
fi

# if no ext_packages are specified, all PEST packages but the org_package
# are ext_packages.
if [ "$ext_packages" = "" ]; then
  for i in $all_packages; do
    if [ "$i" != "$org_package" ]; then
       ext_packages="$ext_packages $i"
    fi
  done
fi

# check if documentation and reference file is installed
docudir=`find_package_dir pestdocu`
if [ $? != 0 ]; then
  warning "Could not find pestdocu."
  docu_installed=0
  ref_installed=0
else
  docu_installed=1
  ref_file=$docudir/AllNames.html
  if [ -f $ref_file ]; then
    ref_installed=1
  else
    ref_installed=0
    warning "Could not find $ref_file"
  fi
fi

html_print_start $org_package

log "Searching for all public declarations in $org_package"

# find all public declarations
all_pub_functions=`find_public_functions "$org_package.*"`

# find occurences of functions in each external package
all_deps=
for ext_package in $ext_packages; do
  log "Searching for dependencies in package $ext_package"
  all_deps="$all_deps `find_deps $ext_package`"
done

all_deps=`(for i in $all_deps; do echo $i; done)|sort -u`

# generate header
if [ $html = 1 ]; then
  html_print_start
else
  echo "Dependencies for $org_package"
fi

# search for occurences of each function in all_deps and generate output
unused_functions=
for i in $all_pub_functions; do
  pub_function=`(IFS=":";set $i; echo $2)`
  fct_deps=`(for name in $all_deps; do echo $name; done)|grep -w "^$pub_function"`
  if [ "$fct_deps" != "" ]; then
   used_functions="$used_functions $i"
   if [ $html = 1 ]; then
     html_print_deps "$pub_function" "$fct_deps"
   else
    echo "Dependencies for function $pub_function"
    for j in $fct_deps; do 
      (
        IFS=:
        set $j
        echo "$2, at line $3"
      )
    done
    fi
  else
     unused_functions="$unused_functions $pub_function"
  fi
done

if [ $show_unused_functions = 1 ]; then
  unused_functions=`(for i in $unused_functions; do echo $i; done)|sort -u`
  if [ $html = 1 ]; then
    html_print_unused_functions $unused_functions
  else
    set $unused_functions
    if [ $# -gt 0 ]; then
      echo "The following functions are declared public but not used in searched packages:"
      while [ $# -gt 0 ]; do
        echo $1
        shift
      done
    fi
  fi
fi

if [ $html = 1 ]; then
  html_print_end
fi

if [ $html = 1 ]; then
  cp -f $tempfile $outfile
  if [ $? = 0 ]; then
    log "Output written to $outfile"
#    rm -f $tempfile
  else
    error "Could not write to $outfile. Output kept in $tempfile."
  fi
fi
